name: Deploy Floucast Processing to ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# Required for OIDC authentication
permissions:
  id-token: write   # Required for requesting the JWT
  contents: read    # Required for actions/checkout

env:
  AWS_ACCOUNT_ID: 706184284758
  AWS_REGION: ap-southeast-3
  ECR_REPOSITORY: 706184284758.dkr.ecr.ap-southeast-3.amazonaws.com/floucast-processing
  IMAGE_TAG: dev
  CONTAINER_NAME: floucast-processing
  ECS_SERVICE: floucast-processing
  ECS_CLUSTER: floucast-dev
  ECS_TASK_DEFINITION: floucast-processing-dev

jobs:
  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v4.1.0
      if: github.event_name != 'pull_request'
      with:
        role-to-assume: "arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-actions"
        role-session-name: github-actions-${{ github.run_id }}
        role-duration-seconds: 3600
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: true

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2.0.1

    - name: Sts GetCallerIdentity
      if: github.event_name != 'pull_request'
      run: |
        aws sts get-caller-identity

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.7.1

    - name: Cache Docker layers
      uses: actions/cache@v4.2.4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-api-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-api-buildx-

    - name: Build
      uses: docker/build-push-action@v6.10.0
      with:
        context: .
        platforms: linux/amd64
        push: false
        provenance: false
        tags: |
          ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          ${{ env.ECR_REPOSITORY }}:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Push
      uses: docker/build-push-action@v6.10.0
      if: github.event_name != 'pull_request'
      with:
        context: .
        platforms: linux/amd64
        push: true
        provenance: false
        tags: |
          ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          ${{ env.ECR_REPOSITORY }}:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

    - name: Get task definition
      id: download-task
      run: |
        aws ecs describe-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }} \
          --query taskDefinition > task-definition.json
        revision=$(($(cat task-definition.json | jq .revision) - 1))
        echo "revision=$revision" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        image: ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
        container-name: ${{ env.CONTAINER_NAME }}

    - name: Deploy Amazon ECS task definition
      id: ecs-deploy
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Check if deployment was successful
      id: check-deployment
      run: |
        CURRENT_TASK_DEF_ARN=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --query services[0].deployments[0].taskDefinition | jq -r ".")
        NEW_TASK_DEF_ARN=${{ steps.ecs-deploy.outputs.task-definition-arn }}
        echo "Current task arn: $CURRENT_TASK_DEF_ARN"
        echo "New task arn: $NEW_TASK_DEF_ARN"
        if [ "$CURRENT_TASK_DEF_ARN" != "$NEW_TASK_DEF_ARN" ]; then
          echo "Deployment failed. Service ${{ env.ECS_SERVICE }} is still using the old task definition. Please check the ECS console for logs."
          exit 1
        fi

    - name: De-register previous revision
      run: |
        aws ecs deregister-task-definition \
          --task-definition ${{ env.ECS_TASK_DEFINITION }}:${{ steps.download-task.outputs.revision }}

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üöÄ Document Processor deployment successful!"
          echo "- Image: ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          echo "- Task Definition: ${{ steps.ecs-deploy.outputs.task-definition-arn }}"
          echo "- Cluster: ${{ env.ECS_CLUSTER }}"
          echo "- Service: ${{ env.ECS_SERVICE }}"
        else
          echo "‚ùå Document Processor deployment failed!"
          echo "Check the logs above for error details."
          
          # Get recent ECS events for debugging
          aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --query 'services[0].events[:5]' \
            --output table
        fi

  # rollback:
  #   name: Rollback on failure
  #   needs: deploy
  #   if: failure()
  #   runs-on: ubuntu-latest
  #   environment: dev
    
  #   # Required for OIDC authentication
  #   permissions:
  #     id-token: write
  #     contents: read

  #   steps:
  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v4.1.0
  #     with:
  #       role-to-assume: "arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/github-actions"
  #       role-session-name: github-actions-rollback-${{ github.run_id }}
  #       role-duration-seconds: 1800
  #       aws-region: ${{ env.AWS_REGION }}
  #       mask-aws-account-id: true

  #   - name: Rollback to previous task definition
  #     run: |
  #       echo "üîÑ Rolling back to previous stable version..."
        
  #       # Get all task definitions and find the previous one
  #       TASK_DEFS=$(aws ecs list-task-definitions \
  #         --family-prefix ${{ env.ECS_TASK_DEFINITION }} \
  #         --sort DESC \
  #         --query 'taskDefinitionArns[:2]' \
  #         --output text)
        
  #       # Get the second most recent (previous) task definition
  #       PREVIOUS_TASK_DEF=$(echo $TASK_DEFS | awk '{print $2}')
        
  #       if [ "$PREVIOUS_TASK_DEF" != "" ] && [ "$PREVIOUS_TASK_DEF" != "None" ]; then
  #         echo "Found previous task definition: $PREVIOUS_TASK_DEF"
          
  #         # Rollback by updating service to use previous task definition
  #         aws ecs update-service \
  #           --cluster ${{ env.ECS_CLUSTER }} \
  #           --service ${{ env.ECS_SERVICE }} \
  #           --task-definition $PREVIOUS_TASK_DEF \
  #           --force-new-deployment
          
  #         echo "‚úÖ Rollback initiated. Service will return to previous stable state."
  #       else
  #         echo "‚ö†Ô∏è No previous task definition found. Manual intervention may be required."
  #       fi
